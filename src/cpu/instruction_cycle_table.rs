// get the number of cycles an instruction should take
// should be in a data structure not a match statement
// generated from a table of opcodes with excel and vim macros
// conditional instructions have multiple cycle counts, return the lesser here
// cpu will add extra cycles during execution

pub fn get_cycle_count(instruction: u8, prefixed: bool) -> u8 {
    match (instruction, prefixed) {
        (0x00, false) => 4,
        (0x01, false) => 12,
        (0x02, false) => 8,
        (0x03, false) => 8,
        (0x04, false) => 4,
        (0x05, false) => 4,
        (0x06, false) => 8,
        (0x07, false) => 4,
        (0x08, false) => 20,
        (0x09, false) => 8,
        (0x0A, false) => 8,
        (0x0B, false) => 8,
        (0x0C, false) => 4,
        (0x0D, false) => 4,
        (0x0E, false) => 8,
        (0x0F, false) => 4,

        (0x10, false) => 4,
        (0x11, false) => 12,
        (0x12, false) => 8,
        (0x13, false) => 8,
        (0x14, false) => 4,
        (0x15, false) => 4,
        (0x16, false) => 8,
        (0x17, false) => 4,
        (0x18, false) => 12,
        (0x19, false) => 8,
        (0x1A, false) => 8,
        (0x1B, false) => 8,
        (0x1C, false) => 4,
        (0x1D, false) => 4,
        (0x1E, false) => 8,
        (0x1F, false) => 4,

        (0x20, false) => 8,
        (0x30, false) => 8,
        (0x40, false) => 4,
        (0x50, false) => 4,
        (0x60, false) => 4,
        (0x70, false) => 8,
        (0x80, false) => 4,
        (0x90, false) => 4,
        (0xA0, false) => 4,
        (0xB0, false) => 4,
        (0xC0, false) => 8,
        (0xD0, false) => 8,
        (0xE0, false) => 12,
        (0xF0, false) => 12,

        (0x21, false) => 12,
        (0x31, false) => 12,
        (0x41, false) => 4,
        (0x51, false) => 4,
        (0x61, false) => 4,
        (0x71, false) => 8,
        (0x81, false) => 4,
        (0x91, false) => 4,
        (0xA1, false) => 4,
        (0xB1, false) => 4,
        (0xC1, false) => 12,
        (0xD1, false) => 12,
        (0xE1, false) => 12,
        (0xF1, false) => 12,

        (0x22, false) => 8,
        (0x32, false) => 8,
        (0x42, false) => 4,
        (0x52, false) => 4,
        (0x62, false) => 4,
        (0x72, false) => 8,
        (0x82, false) => 4,
        (0x92, false) => 4,
        (0xA2, false) => 4,
        (0xB2, false) => 4,
        (0xC2, false) => 12,
        (0xD2, false) => 12,
        (0xE2, false) => 8,
        (0xF2, false) => 8,

        (0x23, false) => 8,
        (0x33, false) => 8,
        (0x43, false) => 4,
        (0x53, false) => 4,
        (0x63, false) => 4,
        (0x73, false) => 8,
        (0x83, false) => 4,
        (0x93, false) => 4,
        (0xA3, false) => 4,
        (0xB3, false) => 4,
        (0xC3, false) => 16,
        (0xF3, false) => 4,

        (0x24, false) => 4,
        (0x34, false) => 12,
        (0x44, false) => 4,
        (0x54, false) => 4,
        (0x64, false) => 4,
        (0x74, false) => 8,
        (0x84, false) => 4,
        (0x94, false) => 4,
        (0xA4, false) => 4,
        (0xB4, false) => 4,
        (0xC4, false) => 12,
        (0xD4, false) => 12,

        (0x25, false) => 4,
        (0x35, false) => 12,
        (0x45, false) => 4,
        (0x55, false) => 4,
        (0x65, false) => 4,
        (0x75, false) => 8,
        (0x85, false) => 4,
        (0x95, false) => 4,
        (0xA5, false) => 4,
        (0xB5, false) => 4,
        (0xC5, false) => 16,
        (0xD5, false) => 16,
        (0xE5, false) => 16,
        (0xF5, false) => 16,

        (0x26, false) => 8,
        (0x36, false) => 12,
        (0x46, false) => 8,
        (0x56, false) => 8,
        (0x66, false) => 8,
        (0x76, false) => 4,
        (0x86, false) => 8,
        (0x96, false) => 8,
        (0xA6, false) => 8,
        (0xB6, false) => 8,
        (0xC6, false) => 8,
        (0xD6, false) => 8,
        (0xE6, false) => 8,
        (0xF6, false) => 8,

        (0x27, false) => 4,
        (0x37, false) => 4,
        (0x47, false) => 4,
        (0x57, false) => 4,
        (0x67, false) => 4,
        (0x77, false) => 8,
        (0x87, false) => 4,
        (0x97, false) => 4,
        (0xA7, false) => 4,
        (0xB7, false) => 4,
        (0xC7, false) => 16,
        (0xD7, false) => 16,
        (0xE7, false) => 16,
        (0xF7, false) => 16,

        (0x28, false) => 8,
        (0x38, false) => 8,
        (0x48, false) => 4,
        (0x58, false) => 4,
        (0x68, false) => 4,
        (0x78, false) => 4,
        (0x88, false) => 4,
        (0x98, false) => 4,
        (0xA8, false) => 4,
        (0xB8, false) => 4,
        (0xC8, false) => 8,
        (0xD8, false) => 8,
        (0xE8, false) => 16,
        (0xF8, false) => 12,

        (0x29, false) => 8,
        (0x39, false) => 8,
        (0x49, false) => 4,
        (0x59, false) => 4,
        (0x69, false) => 4,
        (0x79, false) => 4,
        (0x89, false) => 4,
        (0x99, false) => 4,
        (0xA9, false) => 4,
        (0xB9, false) => 4,
        (0xC9, false) => 16,
        (0xD9, false) => 16,
        (0xE9, false) => 4,
        (0xF9, false) => 8,

        (0x2A, false) => 8,
        (0x3A, false) => 8,
        (0x4A, false) => 4,
        (0x5A, false) => 4,
        (0x6A, false) => 4,
        (0x7A, false) => 4,
        (0x8A, false) => 4,
        (0x9A, false) => 4,
        (0xAA, false) => 4,
        (0xBA, false) => 4,
        (0xCA, false) => 12,
        (0xDA, false) => 12,
        (0xEA, false) => 16,
        (0xFA, false) => 16,

        (0x2B, false) => 8,
        (0x3B, false) => 8,
        (0x4B, false) => 4,
        (0x5B, false) => 4,
        (0x6B, false) => 4,
        (0x7B, false) => 4,
        (0x8B, false) => 4,
        (0x9B, false) => 4,
        (0xAB, false) => 4,
        (0xBB, false) => 4,
        (0xCB, false) => 4,
        (0xFB, false) => 4,

        (0x2C, false) => 4,
        (0x3C, false) => 4,
        (0x4C, false) => 4,
        (0x5C, false) => 4,
        (0x6C, false) => 4,
        (0x7C, false) => 4,
        (0x8C, false) => 4,
        (0x9C, false) => 4,
        (0xAC, false) => 4,
        (0xBC, false) => 4,
        (0xCC, false) => 12,
        (0xDC, false) => 12,

        (0x2D, false) => 4,
        (0x3D, false) => 4,
        (0x4D, false) => 4,
        (0x5D, false) => 4,
        (0x6D, false) => 4,
        (0x7D, false) => 4,
        (0x8D, false) => 4,
        (0x9D, false) => 4,
        (0xAD, false) => 4,
        (0xBD, false) => 4,
        (0xCD, false) => 24,

        (0x2E, false) => 8,
        (0x3E, false) => 8,
        (0x4E, false) => 8,
        (0x5E, false) => 8,
        (0x6E, false) => 8,
        (0x7E, false) => 8,
        (0x8E, false) => 8,
        (0x9E, false) => 8,
        (0xAE, false) => 8,
        (0xBE, false) => 8,
        (0xCE, false) => 8,
        (0xDE, false) => 8,
        (0xEE, false) => 8,
        (0xFE, false) => 8,

        (0x2F, false) => 4,
        (0x3F, false) => 4,
        (0x4F, false) => 4,
        (0x5F, false) => 4,
        (0x6F, false) => 4,
        (0x7F, false) => 4,
        (0x8F, false) => 4,
        (0x9F, false) => 4,
        (0xAF, false) => 4,
        (0xBF, false) => 4,
        (0xCF, false) => 16,
        (0xDF, false) => 16,
        (0xEF, false) => 16,

        _ => 0,
    }
}
